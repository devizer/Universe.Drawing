using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Universe.Drawing
{
    partial class BitmapWriter
    {

        static byte FindSepiaIndex(byte r, byte g, byte b)
        {
            int inputRed = r;
            int inputGreen = g;
            int inputBlue = b;
            var outputRed = (inputRed * 3930 + inputGreen * 7690 + inputBlue * 1890) / 10000;
            var outputGreen = (inputRed * 3490 + inputGreen * 6860 + inputBlue * 1680) / 10000;
            var outputBlue = (inputRed * 2720 + inputGreen * 5340 + inputBlue * 1310) / 10000;

            // looking nearest index;
            int minIndex = 0;
            int maxIndex = 0xFA;
            int center = 0;
            while (maxIndex - minIndex > 2)
            {
                center = (maxIndex + minIndex) / 2;
                byte bCenter = _sepia[center*3];
                if (bCenter < outputBlue)
                    minIndex = center;
                else
                    maxIndex = center;
            }

            int iFrom = Math.Max(center - 1, 0);
            int iTo = Math.Max(center + 1, 252);
            int posSepia = iFrom*3;
            int minDiff = 2000000000;
            byte ret = 0;
            for (int i = iFrom; i <= iTo; i++)
            {
                int bs = outputBlue - (int) _sepia[posSepia++];
                int gs = outputGreen - (int) _sepia[posSepia++];
                int rs = outputRed - (int) _sepia[posSepia++];
                var diff = bs * bs + gs * gs + rs * rs;
                if (diff < minDiff)
                {
                    minDiff = diff;
                    ret = (byte)i;
                    if (diff == 0) break;
                }
            }

            return ret;
        }

        static byte FindSepiaIndex_Old(byte r, byte g, byte b)
        {
            int inputRed = r;
            int inputGreen = g;
            int inputBlue = b;
            var outputRed = (inputRed * 3930 + inputGreen * 7690 + inputBlue * 1890) / 10000;
            var outputGreen = (inputRed * 3490 + inputGreen * 6860 + inputBlue * 1680) / 10000;
            var outputBlue = (inputRed * 2720 + inputGreen * 5340 + inputBlue * 1310) / 10000;
            int minDiff = 2000000000;
            byte ret = 0;
            int posSepia = 0;
            for (int i = 0; i < 252; i++)
            {
                int bs = outputBlue - (int)_sepia[posSepia++];
                int gs = outputGreen - (int)_sepia[posSepia++];
                int rs = outputRed - (int)_sepia[posSepia++];
                var diff = bs * bs + gs * gs + rs * rs;
                if (diff < minDiff)
                {
                    minDiff = diff;
                    ret = (byte)i;
                    if (diff == 0) break;
                }
            }

            return ret;
        }

        static readonly private byte[] _sepia = new byte[768]
        {
             0x00,  0x00,  0x01, // 00
             0x00,  0x02,  0x05,
             0x01,  0x03,  0x07,
             0x01,  0x04,  0x09,
             0x02,  0x05,  0x0A,
             0x02,  0x06,  0x0C,
             0x03,  0x07,  0x0E,
             0x04,  0x08,  0x0F,
             0x04,  0x09,  0x11, // 08
             0x05,  0x0A,  0x13,
             0x05,  0x0B,  0x14,
             0x06,  0x0C,  0x16,
             0x07,  0x0D,  0x17,
             0x07,  0x0E,  0x19,
             0x08,  0x0F,  0x1A,
             0x09,  0x10,  0x1B,
             0x09,  0x11,  0x1D, // 10
             0x0A,  0x12,  0x1E,
             0x0B,  0x13,  0x1F,
             0x0C,  0x14,  0x21,
             0x0D,  0x16,  0x23,
             0x0E,  0x17,  0x25,
             0x0E,  0x18,  0x26,
             0x0F,  0x19,  0x27,
             0x10,  0x1A,  0x29, // 18
             0x11,  0x1B,  0x2A,
             0x12,  0x1C,  0x2B,
             0x12,  0x1D,  0x2C,
             0x13,  0x1E,  0x2E,
             0x14,  0x1F,  0x2F,
             0x15,  0x20,  0x30,
             0x16,  0x22,  0x32,
             0x17,  0x23,  0x34, // 20
             0x18,  0x24,  0x35,
             0x19,  0x25,  0x36,
             0x19,  0x26,  0x37,
             0x1A,  0x27,  0x38,
             0x1B,  0x28,  0x39,
             0x1C,  0x29,  0x3B,
             0x1D,  0x2A,  0x3C,
             0x1E,  0x2B,  0x3D, // 28
             0x1E,  0x2C,  0x3E,
             0x1F,  0x2D,  0x3F,
             0x20,  0x2E,  0x40,
             0x21,  0x2F,  0x41,
             0x22,  0x30,  0x43,
             0x23,  0x31,  0x44,
             0x24,  0x32,  0x45,
             0x25,  0x34,  0x47, // 30
             0x26,  0x35,  0x48,
             0x27,  0x36,  0x49,
             0x28,  0x37,  0x4A,
             0x29,  0x38,  0x4B,
             0x2A,  0x39,  0x4C,
             0x2B,  0x3A,  0x4D,
             0x2C,  0x3B,  0x4F,
             0x2C,  0x3C,  0x50, // 38
             0x2D,  0x3D,  0x51,
             0x2E,  0x3E,  0x52,
             0x2F,  0x3F,  0x53,
             0x30,  0x40,  0x54,
             0x31,  0x41,  0x55,
             0x32,  0x42,  0x56,
             0x33,  0x43,  0x57,
             0x34,  0x44,  0x58, // 40
             0x35,  0x45,  0x59,
             0x36,  0x46,  0x5A,
             0x37,  0x48,  0x5C,
             0x38,  0x49,  0x5D,
             0x39,  0x4A,  0x5E,
             0x3A,  0x4B,  0x5F,
             0x3B,  0x4C,  0x60,
             0x3C,  0x4D,  0x61, // 48
             0x3D,  0x4E,  0x62,
             0x3E,  0x4F,  0x63,
             0x3F,  0x50,  0x64,
             0x40,  0x51,  0x65,
             0x41,  0x52,  0x66,
             0x42,  0x53,  0x67,
             0x43,  0x54,  0x68,
             0x44,  0x55,  0x69, // 50
             0x45,  0x56,  0x6A,
             0x46,  0x57,  0x6B,
             0x47,  0x58,  0x6C,
             0x48,  0x59,  0x6D,
             0x49,  0x5A,  0x6E,
             0x4A,  0x5B,  0x6F,
             0x4B,  0x5C,  0x70,
             0x4C,  0x5D,  0x71, // 58
             0x4C,  0x5E,  0x72,
             0x4D,  0x5F,  0x73,
             0x4E,  0x60,  0x74,
             0x4F,  0x61,  0x75,
             0x50,  0x62,  0x76,
             0x51,  0x63,  0x77,
             0x52,  0x64,  0x78,
             0x53,  0x65,  0x79, // 60
             0x54,  0x66,  0x7A,
             0x55,  0x67,  0x7B,
             0x56,  0x68,  0x7C,
             0x57,  0x69,  0x7D,
             0x58,  0x6A,  0x7E,
             0x59,  0x6B,  0x7F,
             0x5A,  0x6C,  0x80,
             0x5B,  0x6D,  0x81, // 68
             0x5C,  0x6E,  0x82,
             0x5D,  0x6F,  0x83,
             0x5F,  0x70,  0x84,
             0x60,  0x71,  0x84,
             0x61,  0x72,  0x85,
             0x62,  0x73,  0x86,
             0x63,  0x74,  0x87,
             0x64,  0x75,  0x88, // 70
             0x65,  0x76,  0x89,
             0x66,  0x77,  0x8A,
             0x67,  0x78,  0x8B,
             0x68,  0x79,  0x8C,
             0x69,  0x7A,  0x8D,
             0x6A,  0x7B,  0x8E,
             0x6B,  0x7C,  0x8F,
             0x6C,  0x7D,  0x90, // 78
             0x6D,  0x7E,  0x91,
             0x6E,  0x7F,  0x91,
             0x6F,  0x80,  0x92,
             0x70,  0x81,  0x93,
             0x71,  0x82,  0x94,
             0x72,  0x83,  0x95,
             0x73,  0x84,  0x96,
             0x74,  0x85,  0x97, // 80
             0x75,  0x86,  0x98,
             0x76,  0x87,  0x99,
             0x77,  0x88,  0x9A,
             0x78,  0x89,  0x9B,
             0x7A,  0x8A,  0x9C,
             0x7B,  0x8B,  0x9C,
             0x7C,  0x8C,  0x9D,
             0x7D,  0x8D,  0x9E, // 88
             0x7E,  0x8E,  0x9F,
             0x7F,  0x8F,  0xA0,
             0x80,  0x90,  0xA1,
             0x81,  0x91,  0xA2,
             0x82,  0x92,  0xA3,
             0x83,  0x93,  0xA4,
             0x84,  0x94,  0xA5,
             0x85,  0x95,  0xA5, // 90
             0x86,  0x96,  0xA6,
             0x87,  0x97,  0xA7,
             0x89,  0x98,  0xA8,
             0x8A,  0x99,  0xA9,
             0x8B,  0x9A,  0xAA,
             0x8C,  0x9B,  0xAB,
             0x8D,  0x9C,  0xAC,
             0x8E,  0x9D,  0xAC, // 98
             0x8F,  0x9E,  0xAD,
             0x90,  0x9F,  0xAE,
             0x91,  0xA0,  0xAF,
             0x92,  0xA1,  0xB0,
             0x93,  0xA2,  0xB1,
             0x95,  0xA3,  0xB2,
             0x96,  0xA4,  0xB3,
             0x97,  0xA5,  0xB4, // A0
             0x98,  0xA6,  0xB4,
             0x99,  0xA7,  0xB5,
             0x9A,  0xA8,  0xB6,
             0x9B,  0xA9,  0xB7,
             0x9C,  0xAA,  0xB8,
             0x9D,  0xAB,  0xB9,
             0x9E,  0xAC,  0xBA,
             0xA0,  0xAD,  0xBA, // A8
             0xA1,  0xAE,  0xBB,
             0xA2,  0xAF,  0xBC,
             0xA3,  0xB0,  0xBD,
             0xA4,  0xB1,  0xBE,
             0xA5,  0xB2,  0xBF,
             0xA6,  0xB3,  0xC0,
             0xA7,  0xB4,  0xC0,
             0xA9,  0xB5,  0xC1, // B0
             0xAA,  0xB6,  0xC2,
             0xAB,  0xB7,  0xC3,
             0xAC,  0xB8,  0xC4,
             0xAD,  0xB9,  0xC5,
             0xAE,  0xBA,  0xC6,
             0xAF,  0xBB,  0xC6,
             0xB0,  0xBC,  0xC7,
             0xB2,  0xBD,  0xC8, // B8
             0xB3,  0xBE,  0xC9,
             0xB4,  0xBF,  0xCA,
             0xB5,  0xC0,  0xCB,
             0xB6,  0xC1,  0xCC,
             0xB7,  0xC2,  0xCC,
             0xB8,  0xC3,  0xCD,
             0xB9,  0xC4,  0xCE,
             0xBB,  0xC5,  0xCF, // C0
             0xBC,  0xC6,  0xD0,
             0xBD,  0xC7,  0xD1,
             0xBE,  0xC8,  0xD1,
             0xBF,  0xC9,  0xD2,
             0xC0,  0xCA,  0xD3,
             0xC1,  0xCB,  0xD4,
             0xC3,  0xCC,  0xD5,
             0xC4,  0xCD,  0xD6, // C8
             0xC5,  0xCE,  0xD6,
             0xC6,  0xCF,  0xD7,
             0xC7,  0xD0,  0xD8,
             0xC8,  0xD1,  0xD9,
             0xCA,  0xD2,  0xDA,
             0xCB,  0xD3,  0xDB,
             0xCC,  0xD4,  0xDB,
             0xCD,  0xD5,  0xDC, // D0
             0xCE,  0xD6,  0xDD,
             0xCF,  0xD7,  0xDE,
             0xD0,  0xD8,  0xDF,
             0xD2,  0xD9,  0xE0,
             0xD3,  0xDA,  0xE0,
             0xD4,  0xDB,  0xE1,
             0xD5,  0xDC,  0xE2,
             0xD6,  0xDD,  0xE3, // D8
             0xD7,  0xDE,  0xE4,
             0xD9,  0xDF,  0xE5,
             0xDA,  0xE0,  0xE5,
             0xDB,  0xE1,  0xE6,
             0xDC,  0xE2,  0xE7,
             0xDD,  0xE3,  0xE8,
             0xDE,  0xE4,  0xE9,
             0xE0,  0xE5,  0xE9, // E0
             0xE1,  0xE6,  0xEA,
             0xE2,  0xE7,  0xEB,
             0xE3,  0xE8,  0xEC,
             0xE4,  0xE9,  0xED,
             0xE6,  0xEA,  0xEE,
             0xE7,  0xEB,  0xEE,
             0xE8,  0xEC,  0xEF,
             0xE9,  0xED,  0xF0, // E8
             0xEA,  0xEE,  0xF1,
             0xEB,  0xEF,  0xF2,
             0xED,  0xF0,  0xF2,
             0xEE,  0xF1,  0xF3,
             0xEF,  0xF2,  0xF4,
             0xF0,  0xF3,  0xF5,
             0xF1,  0xF4,  0xF6,
             0xF3,  0xF5,  0xF6, // F0
             0xF4,  0xF6,  0xF7,
             0xF5,  0xF7,  0xF8,
             0xF6,  0xF8,  0xF9,
             0xF7,  0xF9,  0xFA,
             0xF9,  0xFA,  0xFA,
             0xFA,  0xFB,  0xFB,
             0xFB,  0xFC,  0xFC,
             0xFC,  0xFD,  0xFD, // F8
             0xFD,  0xFE,  0xFE,
             0xFF,  0xFF,  0xFF,
             0x00,  0x00,  0x00,
             0x00,  0x00,  0x00,
             0x00,  0x00,  0x00,
             0x00,  0x00,  0x00,
             0x00,  0x00,  0x00,
        };

    }
}
